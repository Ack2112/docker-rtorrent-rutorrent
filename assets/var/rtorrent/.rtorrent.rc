# Instance layout (base paths do not change)
method.insert = cfg.basedir, private|const|string, (cat,(system.env,RTORRENT_HOME),"/")
method.insert = cfg.download, private|const|string, (cat,(cfg.basedir),"download/")
method.insert = cfg.download_complete, private|const|string, (cat,(cfg.download),"complete/")
method.insert = cfg.download_temp, private|const|string, (cat,(cfg.download),"temp/")
method.insert = cfg.logs, private|const|string, (cat,(cfg.basedir),"log/")
method.insert = cfg.session, private|const|string, (cat,(cfg.basedir),".session/")
method.insert = cfg.watch, private|const|string, (cat,(cfg.basedir),"watch/")
method.insert = cfg.rundir, private|const|string, "/run/rtorrent/"

# Run the rTorrent process as a daemon in the background
# (and control via XMLRPC sockets)
system.daemon.set = true

# Maximum and minimum number of peers to connect to per torrent.
throttle.min_peers.normal.set = 1
throttle.max_peers.normal.set = 100

# Same as above but for seeding completed torrents (-1 = same as downloading)
throttle.min_peers.seed.set = 1
throttle.max_peers.seed.set = 50

# Maximum number of simultanious uploads per torrent.
throttle.max_uploads.set = 15

# Global upload and download rate in KiB. "0" for unlimited.
throttle.global_down.max_rate.set_kb = 0
throttle.global_up.max_rate.set_kb = 0

# Default directory to save the downloaded torrents.
directory.default.set = (cat,(cfg.download_temp))

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path ?
session.path.set = (cat,(cfg.session))
execute.nothrow = sh,-c,(cat,"echo >",(cfg.rundir),"rtorrent.pid"," ",(system.pid))

# The ip address reported to the tracker.
#network.local_address.set = 127.0.0.1
#network.local_address.set = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#network.bind_address.set = 127.0.0.1
#network.bind_address.set = rakshasa.no

# Listening port for incoming peer traffic
network.port_range.set = 50000-50000
network.port_random.set = no

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
dht.mode.set = auto

# UDP port to use for DHT.
dht.port.set = 6881

# Enable peer exchange (for torrents not marked private)
protocol.pex.set = yes

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
pieces.hash.on_completion.set = yes

# Set whether the client should try to connect to UDP trackers.
#trackers.use_udp.set = yes

# Set the max amount of memory address space used to mapping file chunks. This refers to memory mapping, not
#  physical memory allocation. Default: 1GB (max_memory_usage)
# This may also be set using ulimit -m where 3/4 will be allocated to file chunks.
#pieces.memory.max.set = 1GB

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule2 = ip_tick,0,1800,ip=rakshasa
#schedule2 = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
protocol.encryption.set = allow_incoming,try_outgoing,enable_retry

# Logging:
#   Levels = critical error warn notice info debug
#   Groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
log.open_file = "log",(cat,(cfg.logs),"rtorrent.log")
log.add_output = "info","log"
log.add_output = "rpc_events","log"
#log.execute = (cat,(cfg.logs),"execute.log")
#log.xmlrpc = (cat,(cfg.logs),"xmlrpc.log")

# Since "network.scgi.open_local" is parsed by "rtcontrol", this must be a literal value,
# and also not moved out of the main configuration file!
# SCHEDULE: Make SCGI socket group-writable and secure
network.scgi.open_local = (cat, (cfg.rundir), "scgi.socket")
schedule2 = scgi_permission, 0, 0, (cat,"execute.nothrow=chmod,\"g+w,o=\",",(cfg.rundir),"scgi.socket")
network.xmlrpc.size_limit.set = 4M

# Set the umask for this process, which is applied to all files created by the program.
system.umask.set = 0022

# Add a preferred filename encoding to the list.
encoding.add = UTF-8

# Watch a directory for new torrents, and stop those that have been deleted.
schedule2 = watch_directory, 1, 1, (cat,"load.start=",(cfg.watch),"*.torrent")
schedule2 = untied_directory, 5, 5, (cat,"stop_untied=",(cfg.watch),"*.torrent")

# Close torrents when diskspace is low.
schedule2 = monitor_diskspace, 15, 60, ((close_low_diskspace,1000M))

# Move finished.
method.set_key = event.download.finished, move_complete, (cat,"d.directory.set=",(cfg.download_complete),";execute=mv,-u,\$d.get_base_path=,",(cfg.download_complete))