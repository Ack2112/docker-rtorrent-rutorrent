# Maximum and minimum number of peers to connect to per torrent.
min_peers = 1
max_peers = 100

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = 1
max_peers_seed = 50

# Maximum number of simultanious uploads per torrent.
max_uploads = 15

# Global upload and download rate in KiB. "0" for unlimited.
download_rate = 0
upload_rate = 0

# Default directory to save the downloaded torrents.
directory = /home/rtorrent/downloads/temp

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session = /home/rtorrent/.session

# Watch a directory for new torrents, and stop those that have been
# deleted.
schedule = watch_directory,1,1,"load_start=/home/rtorrent/.watch/*.torrent"
schedule = untied_directory,5,5,"stop_untied=/home/rtorrent/.watch/*.torrent"

# Close torrents when diskspace is low.
schedule = low_diskspace,5,60,close_low_diskspace=100M

# The ip address reported to the tracker.
#ip = 127.0.0.1
#ip = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#bind = 127.0.0.1
#bind = rakshasa.no

# Listening port for incoming peer traffic
network.port_range.set = 50000-50000
network.port_random.set = no

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
check_hash = yes

# Set whether the client should try to connect to UDP trackers.
use_udp_trackers = yes

# Set the max amount of memory address space used to mapping file chunks. This refers to memory mapping, not
#  physical memory allocation. Default: \`1GB\` (\`max_memory_usage\`)
# This may also be set using ulimit -m where 3/4 will be allocated to file chunks.
#pieces.memory.max.set = 1GB

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
# encryption = allow_incoming,enable_retry,prefer_plaintext
encryption = allow_incoming,try_outgoing,enable_retry

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
#
# dht = auto
dht = auto

# UDP port to use for DHT.
dht_port = 6881

# Enable peer exchange (for torrents not marked private)
peer_exchange = yes

# Logging:
#   Levels = critical error warn notice info debug
#   Groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
log.open_file = "log", (cat,/home/rtorrent/.log/rtorrent.log)
log.add_output = "info", "log"
#log.add_output = "tracker_debug", "log"

# XMLRPC
scgi_port = 0.0.0.0:5000
network.xmlrpc.size_limit.set = 10000000

# Set the umask for this process, which is applied to all files created by the program.
# default 0022
#system.umask.set = 0000
system.umask.set = 0022

# Add a preferred filename encoding to the list.
encoding_list = UTF-8

# Move finished
system.method.set_key = event.download.finished,move_complete,"d.set_directory=/home/rtorrent/downloads/complete/;execute=mv,-u,\$d.get_base_path=,/home/rtorrent/downloads/complete/"
